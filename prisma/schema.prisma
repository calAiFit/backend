// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  userId       String    @unique
  email         String    @unique
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  dailyGoals    DailyGoal[]
  orders        Order[]
  stats         Stat[]
  workouts      Workout[]
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  name          String
  age           Int?
  gender        String?
  height        Float?
  avatarUrl     String
  weight        Float?
  targetWeight  Float?
  activityLevel String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model DailyGoal {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime
  calories    Int
  protein     Int
  carbs       Int
  fats        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([userId, date])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  products    Product[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  calories    Int
  protein     Int
  carbs       Int
  fats        Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  total       Float
  status      String    @default("pending")
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stat {
  id     String @id @default(cuid())
  key    String
  value  String
  label  String
  icon   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Workout {
  id        String   @id @default(cuid())
  date      DateTime
  duration  Int
  calories  Int
  exercises String[]
  userId    String
  user      User @relation(fields: [userId], references: [id])
}